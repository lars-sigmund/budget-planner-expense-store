name: CI Budget Planner Expense Store
on:
  - push
jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@cc4fc85e6b35bafd578d5ffbc76a5518407e1af0 # v4.2.1

      - name: Build with Gradle Wrapper
        run: ./gradlew test --info --stacktrace

      - name: Publish test report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        if: endsWith(github.ref, 'main')

      - name: Check for new release
        if: endsWith(github.ref, 'main')
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  publish:
    needs:
      - test
      - release
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          VERSION=$(git describe --match "v[0-9]*.[0-9]*.*[0-9]" --abbrev=0 --tags `git rev-list --tags --max-count=1`)
          APPENDIX=`node ci/appendix.js ${{github.ref_name}}`
          IMAGE_TAG=$(echo $VERSION-$APPENDIX | awk '{print tolower($0)}')
          IMAGE_ID=$(echo ghcr.io/${{github.repository}} | awk '{print tolower($0)}')
          echo IMAGE_ID=$IMAGE_ID
          echo IMAGE_TAG=$IMAGE_TAG
          ./gradlew bootBuildImage --imageName=$IMAGE_ID:$IMAGE_TAG
          docker push $IMAGE_ID:$IMAGE_TAG